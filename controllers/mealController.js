const mongoose = require('mongoose')
const _ = require('lodash')

require('../models/meal.model')
require('../models/category.model')
require('../models/main.model')
const Meal = mongoose.model('meals')
const Category = mongoose.model('categorys')
const Main = mongoose.model('mains')

class MealController {

    // –ü–æ–∏—Å–∫ –±–ª—é–¥–∞ –ø–æ uuid
    findMealByUuid(query) {
        return Meal.findOne({uuid: query})
    }

    async findMealByName(query) {
        const meals = await Meal.findOne({name: query}).sort({sort: 1});
        return meals;
    }

    async findUrl(query) {
        const meals = await Category.findOne({button: query})
        if (meals) {
            if (meals.videourl) {
                return meals.videourl;
            } else return null
        } else {
            return null
        }
    }

    // –ü–æ–∏—Å–∫ –±–ª—é–¥ –ø–æ —Ç–∏–ø—É
    async findMealsByTypeQuery(query, lang) {
        const meals = await Meal.find({
            $or: [{type: query, lang: lang}, {
                subcategory: query,
                lang: lang
            }]
        }).sort({sort: 1});
        let types = []
        let type = []

        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–∏–ø–æ–≤ –±–ª—é–¥
        meals.map(m => types.push(m.name))
        // —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–∏–ø–æ–≤
        types = _.uniq(types);

        for (var i = 0; i < types.length; i += 2) {
            types[i + 1] ? type.push([{text: types[i]}, {text: types[i + 1]}]) : type.push([{text: types[i]}])
        }
        // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
        if (lang === 'uz') {
            type.unshift([{text: 'üì• Savat'},{text: '‚è´'}])
            type.push([{text: '‚¨ÖÔ∏è Menyu'}, {text: '‚¨ÖÔ∏è Orqaga'}])
        } else {
            type.unshift([{text: 'üì• –ö–æ—Ä–∑–∏–Ω–∞'},{text: '‚è´ –°–ø–∏—Å–æ–∫'}])
            type.push([{text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'}, {text: '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥'}])
        }
        // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"


        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        type = {
            resize_keyboard: true,
            one_time_keyboard: false,
            keyboard: type
        }

        // –≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤
        return type
    }

    async findAllMealsByTypeQuery(query, lang) {
        const meals = await Meal.find({
            $or: [{type: query, lang: lang, isIsset: true}, {
                subcategory: query,
                lang: lang
            }]
        }).sort({sort: 1});
        let types = []
        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–∏–ø–æ–≤ –±–ª—é–¥
        meals.map(m => {
            types.push(m)
        })
        // —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–∏–ø–æ–≤
        types = _.uniq(types);

        // –≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤
        return types
    }
    async findContacts(lang) {
        const meals = await Category.findOne({button: 'about', lang: lang})
        return meals
    }
    async searchAllMealsByTypeQuery(query, lang) {
        const meals = await Meal.find({name: {$regex: query, $options: "i"}, lang: lang}).sort({sort: 1});
        let types = []
        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–∏–ø–æ–≤ –±–ª—é–¥
        meals.map(m => {
            types.push(m)
        })
        // —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–∏–ø–æ–≤
        types = _.uniq(types);

        // –≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤
        return types
    }

    async searchMealsByTypeQuery(query, lang) {
        const meals = await Meal.find({name: {$regex: query, $options: "i"}, lang: lang})
        let types = []
        let type = []
        if (meals[0]) {

            // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–∏–ø–æ–≤ –±–ª—é–¥
            meals.map(m => types.push(m.name))
            // —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–∏–ø–æ–≤
            types = _.uniq(types);
            if (lang === 'uz') {
                types.unshift('‚è´')
                types.unshift('üì• Savat')
            } else {
                types.unshift('‚è´ –°–ø–∏—Å–æ–∫')
                types.unshift('üì• –ö–æ—Ä–∑–∏–Ω–∞')
            }
            for (var i = 0; i < types.length; i += 2) {
                types[i + 1] ? type.push([{text: types[i]}, {text: types[i + 1]}]) : type.push([{text: types[i]}])
            }
            // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            if (lang === 'uz') {
                type.push([{text: '‚¨ÖÔ∏è Menyu'}, {text: '‚¨ÖÔ∏è Orqaga'}])
            } else {
                type.push([{text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'}, {text: '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥'}])
            }
            // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"


            // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            type = {
                resize_keyboard: true,
                one_time_keyboard: false,
                keyboard: type
            }


            // –≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤
            return {type, types}
        } else {
            return false
        }
    }

    async findMaincategory(query, lang) {
        const meals = await Category.find({maincategory: query, lang: lang}).sort({sort: 1});
        if (meals[0]) {
            return true
        } else {
            return false
        }
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∏–ø–∞–º–∏ –±–ª—é–¥
    async inlineMealTypesKeyboard(query, lang) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
        const meals = await Category.find({maincategory: query, lang: lang}).sort({sort: 1});
        let types = []
        let type = []
        if (meals[0].sort === 10000) {
            meals.map(m => types.push(m.button))
            for (var i = 0; i < types.length; i += 2) {
                types[i + 1] ? type.push([{text: types[i]}, {text: types[i + 1]}]) : type.push([{text: types[i]}])
            }
            if (lang === 'uz') {
                type.push([{text: '‚¨ÖÔ∏è Orqaga'}])
            } else {
                type.push([{text: '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥'}])
            }
        } else {
            // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–∏–ø–æ–≤ –±–ª—é–¥
            meals.map(m => types.push(m.button))

            for (var i = 0; i < types.length; i += 2) {
                types[i + 1] ? type.push([{text: types[i]}, {text: types[i + 1]}]) : type.push([{text: types[i]}])
            }
            // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            if (lang === 'uz') {
                type.push([{text: 'üöñ Buyurtma berish'}])
                type.push([{text: 'üì• Savat'}, {text: '‚¨ÖÔ∏è Orqaga'}])
            } else {
                type.push([{text: 'üöñ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}])
                type.push([{text: 'üì• –ö–æ—Ä–∑–∏–Ω–∞'}, {text: '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥'}])
            }
        }
        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        type = {
            resize_keyboard: true,
            one_time_keyboard: false,
            keyboard: type
        }

        // –≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤
        return type


    }


    async inlineMealMainKeyboard(lang) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
        const meals = await Main.find({lang: lang}).sort({sort: 1});
        let types = []
        let type = []

        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–∏–ø–æ–≤ –±–ª—é–¥
        meals.map(m => types.push(m.button))

        // for (var i = 0; i < types.length; i += 2) {
        //     types[i + 1] || i !==0 ? type.push([{text: types[i]}, {text: types[i + 1]}]) : type.push([{text: types[i]}])
        // }
        meals.map(t => {
            if (!type[t.sort]) {
                type[t.sort] = []
            }
            type[t.sort].push({text: t.button})
        })
        // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"


        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        type = {
            resize_keyboard: true,
            one_time_keyboard: false,
            keyboard: type
        }

        // –≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤
        return type
    }

    async inlineMealSubtypesKeyboard(query, lang) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
        const meals = await Category.findOne({button: query, lang: lang}).sort({sort: 1});
        ;

        let types = []
        let type = []
        if (~meals.subcategory.length) {
            // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–∏–ø–æ–≤ –±–ª—é–¥
            meals.subcategory.map(m => types.push(m))
            for (var i = 0; i < types.length; i += 2) {
                types[i + 1] ? type.push([{text: types[i]}, {text: types[i + 1]}]) : type.push([{text: types[i]}])
            }
            // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            if (lang === 'uz') {
                type.unshift([{text: 'üì• Savat'}])
                type.push([{text: '‚¨ÖÔ∏è Menyu'}, {text: '‚¨ÖÔ∏è Orqaga'}])
            } else {
                type.unshift([{text: 'üì• –ö–æ—Ä–∑–∏–Ω–∞'}])
                type.push([{text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'}, {text: '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥'}])
            }


            // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"

            // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            type = {
                resize_keyboard: true,
                one_time_keyboard: false,
                keyboard: type
            }

            // –≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤
            return type
        } else {
            return false;
        }
    }


    async searchSubtypesKeyboard(query, lang) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
        const meals = await Category.findOne({button: query, lang: lang});
        if (meals) {
            if (meals.subcategory[1]) {
                return true
            } else {
                return false;
            }
        } else return false
    }

}

module.exports = new MealController()
