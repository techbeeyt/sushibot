const mongoose = require('mongoose')

require('../models/order.model')
require('../models/meal.model')
require('../models/user.model')
require('../models/agent.model')

const Meal = mongoose.model('meals')
const Order = mongoose.model('orders')
const User = mongoose.model('users')
const Agent = mongoose.model('agents')

class OrderController {

    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑
    async addMeal(userId, queryId, mealUuid) {
        let orderPromise
        let count = Number(mealUuid);
        const order = await Order.findOne({telegramId: userId, served: "waiting"})
        const meal = await Meal.findOne({name: queryId})
        if (order) {
            let arr;
            let id;
            const a = order.meals.filter(p => meal.name === p.name);
            if (a[0]) {
                for (let i in order.meals) {

                    if (meal.name === order.meals[i].name) {
                        arr = order.meals[i];
                        id = i
                        arr.count += count;
                    }
                }
                if (arr) {
                    order.meals.splice(id, 1)
                    order.meals.unshift(arr)
                    orderPromise = order
                }
            } else {
                meal.count = count;
                order.meals.push(meal)
                orderPromise = order
            }
        } else {
            meal.count = count;
            orderPromise = new Order({
                telegramId: userId,
                meals: [meal],
//            count: 1
            })
        }
        await orderPromise.save()
        const answerText = '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –í–∞—à –∑–∞–∫–∞–∑'
        const result = {
            callback_query_id: queryId,
            text: answerText
        }
        return result
    }

    async addMealFromId(userId, queryId, mealUuid) {
        let orderPromise
        let count = Number(mealUuid);
        // –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const order = await Order.findOne({telegramId: userId, served: "waiting"})
        // –ø–æ–∏—Å–∫ –±–ª—é–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const meal = await Meal.findOne({uuid: queryId})
        // –ø—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
        if (order) {
            // –µ—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            // –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑
            let arr;
            let id;
            const a = order.meals.filter(p => meal.name === p.name);
            if (a[0]) {
                for (let i in order.meals) {

                    if (meal.name === order.meals[i].name) {
                        arr = order.meals[i];
                        id = i
                        arr.count += count;
                        // order.meals.unshift(arr)
                        // orderPromise = order
                    }
                }
                if (arr) {
                    order.meals.splice(id, 1)
                    order.meals.unshift(arr)
                    orderPromise = order
                }
            } else {
                meal.count = count;
                order.meals.push(meal)
                orderPromise = order
            }
        } else {
            // –µ—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            // —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            meal.count = count;
            orderPromise = new Order({
                telegramId: userId,
                meals: [meal],
//            count: 1
            })
        }
        // —Å–æ—Ö—Ä–∞–Ω–∏–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        await orderPromise.save()

        // —Ç–µ–∫—Å—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const answerText = '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É! Savatizga kushildi!'

        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const result = {
            callback_query_id: queryId,
            text: answerText
        }
        return result
    }

    async addMess(userId, message) {
        let orderPromise
        const order = await Order.findOne({telegramId: userId, served: "waiting"})
        if (order) {
            order.mess = message
            orderPromise = order
        } else {
            orderPromise = new Order({
                telegramId: userId,
                mess: message
            })
        }
        await orderPromise.save()
        const answerText = '–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –í–∞—à –∑–∞–∫–∞–∑'
        return answerText
    }

    async findMess(userId) {
        const order = await Order.findOne({telegramId: userId, served: "waiting"})
        if (order.mess) {
            return true
        } else {
            return false
        }
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
    async removeMeal(userId, name) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
        const order = await Order.findOne({telegramId: userId, served: "waiting"})

        // –ø–æ–∏—Å–∫ –±–ª—é–¥–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö
        for (let index = 0; index < order.meals.length; index++) {
            if (order.meals[index].name == name) {
                // —É–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
                order.meals.splice(index, 1)
                break
            }
        }


        if (order.meals.length < 1) {
            order.served = "deleted";
            await order.save()
            return order
        } else {
            await order.save();
            return order
        }
        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }

    async deleteFullOrder(userId) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
        const order = await Order.findOne({telegramId: userId, served: "waiting"})
        order.served = "deleted";
        await order.save();
        return order
    }

    // –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async findOrderById(userId) {
        return Order.findOne({telegramId: userId, served: "waiting"})
    }

    async findPersent() {
        return Agent.find({})
    }

    // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    async applyOrder(userId, type, location) {
        const order = await Order.findOne({telegramId: userId, served: "waiting"})
        const user = await User.findOne({telegramId: userId})
        let msg = "–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª–∏"

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞
        if (order) {
            // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –∑–∞–∫–∞–∑–µ –±–ª—é–¥
            if (order.meals.length > 0) {
                // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
                order.typeorder = type
                // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                if (location.latitude) {
                    order.location = location
                } else {
                    order.address = location
                }
                await order.save()
                return {msg, userphone: user.phone_number}

            } else {
                return {msg, userphone: user.phone_number}
            }
        } else {
            return false
        }
    }


    async applyPayment(userId, payment) {
        const order = await Order.findOne({telegramId: userId, served: "waiting"})
        const user = await User.findOne({telegramId: userId})
        const agent = await Agent.find({})
        let msg = "–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª–∏"

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞
        if (order) {
            // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –∑–∞–∫–∞–∑–µ –±–ª—é–¥
            // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
            order.payment = payment
            order.phone_number = user.phone_number
            order.orderdate = Date.now()
            order.name = user.first_name;
            let dostavka = getDistanceFromLatLonInKm(41.339946, 69.253936, order.location.latitude, order.location.longitude)
            console.log(dostavka)
            let dis =  Math.ceil(dostavka) - 5
            let dos = dis <= 0 ? 8000 : dis * 1200 + 8000
            if(dostavka - 3 <= 0) {
                dos = 0
            }
            if (user.language_code === 'ru') {
                let sum = 0;
                let persent = 0;
                msg = `‚úÖ –í–∞—à –∑–∞–∫–∞–∑: #${order.id}\nüí≥–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${payment}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone_number}\nüè†–ê–¥—Ä–µ—Å:${order.address || 'geolocation'}\n\n`
                order.meals.map(m => {
                    sum = sum + (m.price * m.count);
                    msg += `${m.name}\n${m.count} x ${m.price} = ${prettify(m.count * m.price)}\n`
                })
                if (order.mess) {
                    msg += `üìã–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n${order.mess}\n`
                }
                if (agent[0]) {
                    agent.map(p => {
                        sum > Number(p.videourl) ? persent = Number(p.button) : persent;
                    })
                }
                // if (dos > 0) {
                //     msg += `\n+–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${dos}\n`
                // }
                if (persent > 0) {
                    let i = (sum / 100) * persent
                    msg += `\n% –°–∫–∏–¥–∫–∞ ${persent}% = ${i}`
                    msg += `üìé –ò—Ç–æ–≥–æ: ${prettify(sum)} - ${prettify(i)} = ${prettify((sum - i))}`
                    order.count = sum + dos;
                    order.percent = persent;
                    order.percentsum = i;
                    await order.save()
                } else {
                    msg += `üìé –ò—Ç–æ–≥–æ: ${prettify(sum)}`
                    //msg += `üìé –ò—Ç–æ–≥–æ: ${prettify(sum + dos)}`
                    //order.count = sum + dos;
                    order.count = sum;
                    order.dos = dos;
                    await order.save()
                }
            } else {
                let sum = 0;
                let persent = 0;
                msg = `‚úÖ Sizning buyurtmangiz: #${order.id}\nüí≥ To'lov turi: ${payment}\nüìû Telefon: ${user.phone_number}\nüè†Manzil:${order.address || 'geolocation'}\n\n`
                order.meals.map(m => {
                    sum = sum + (m.price * m.count);
                    msg += `${m.name}\n${m.count} x ${m.price} = ${prettify(m.count * m.price)}\n`
                })
                if (order.mess) {
                    msg += `üìãComment:\n${order.mess}\n`
                }
                if (agent[0]) {
                    agent.map(p => {
                        sum > Number(p.videourl) ? persent = Number(p.button) : persent = 0;
                    })
                }
                // if (dos > 0) {
                //     msg += `\nYetkazib berish narxi: ${dos}\n`
                // }
                if (persent > 0) {
                    let i = (sum / 100) * persent
                    msg += `\n% Chegirma ${persent}% = ${i}`
                    msg += `üìé Umumiy: ${prettify(sum)} - ${prettify(i)} = ${prettify((sum - i))}`
                    order.count = sum + dos;
                    order.percent = persent;
                    order.percentsum = i;
                    await order.save()
                } else {
                    //msg += `üìé Umumiy: ${prettify(sum+dos)}`
                    msg += `üìé Umumiy: ${prettify(sum)}`
                    //order.count = sum + dos;
                    order.count = sum;
                    order.dos = dos;
                    await order.save()
                }
            }


            // if (payment === 'üí≥ Payme' || 'üí≥ Click') {
            //     let prices = []
            //     if (order.percent > 0) {
            //         await order.meals.map(m => {
            //             let label = m.name;
            //             let amount = (m.price * m.count * 100)-(((m.price * m.count * 100)/100)*order.percent)
            //             prices.push({label, amount})
            //         })
            //     } else {
            //         await order.meals.map(m => {
            //             let label = m.name;
            //             let amount = m.price * m.count * 100
            //             prices.push({label, amount})
            //         })
            //     }
            //     return {
            //         prices: prices,
            //         orderId: order.id,
            //         msg: msg
            //     }
            // } else {
            return {
                msg: msg,
                orderId: order.id
            }
            // }

        } else {
            return msg
        }
    }


    async applyToAdmin(userId) {
        const order = await Order.findOne({telegramId: userId, served: "waiting"})
        const user = await User.findOne({telegramId: userId})
        let msg = "–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª–∏"

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞
        if (order) {
            // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –∑–∞–∫–∞–∑–µ –±–ª—é–¥
            order.served = "Served";
            order.orderdate = Date.now()
            await order.save();
            let sum = 0;
            let usermsg;
            if (user.language_code === 'ru') {
                usermsg = `‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n–ñ–¥–∏—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!`;
            } else {
                usermsg = `‚úÖ Buyurtma qayta ishlashga yuborildi!\nOperator qo'ng'irog'ini kuting!`
            }

            msg = `üìÑ–ó–∞–∫–∞–∑: #${order.id}\nüì≤–¢–µ–ª–µ—Ñ–æ–Ω:${user.phone_number}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${order.payment}\nüôé‚Äç‚ôÇÔ∏è –ò–º—è:${user.first_name}\n–¢–∏–ø –∑–∞–∫–∞–∑–∞: ${order.typeorder}\n–ê–¥—Ä–µ—Å: ${order.address || 'geolocation'}\n`
            order.meals.map(m => {
                sum = sum + (m.price * m.count);
                msg += `${m.name}\n${m.count} x ${m.price} = ${prettify(m.count * m.price)}\n`
            })
            if (order.mess) {
                msg += `üìã–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n${order.mess}\n`
            }
            // msg += `\n –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.dos}\n`
            if (order.percent > 0) {
                msg += `\n% –°–∫–∏–¥–∫–∞ ${order.percent}% = ${order.percentsum}`
                msg += `\nüìé –ò—Ç–æ–≥–æ: ${prettify(sum)} - ${prettify(order.percentsum)} = ${prettify(sum - order.percentsum)}`
            } else {
                // msg += `\n\n–ò—Ç–æ–≥–æ: ${prettify(sum + order.dos)}`
                msg += `\n\n–ò—Ç–æ–≥–æ: ${prettify(sum)}`
            }
            return {
                msg: msg,
                usermsg: usermsg,
                location: order.location,
                address: order.address,
                data: order.id
            }
        } else {
            return msg
        }
    }

    async applyToAdminPayment(userId, provider_payment_charge_id) {
        const order = await Order.findOne({telegramId: userId, served: "apply"})
        const user = await User.findOne({telegramId: userId})
        let msg = "–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª–∏"

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞
        if (order) {
            // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –∑–∞–∫–∞–∑–µ –±–ª—é–¥
            order.served = "Served";
            order.status = "–û–ø–ª–∞—á–µ–Ω"
            order.provider_payment_charge_id = provider_payment_charge_id;
            order.orderdate = Date.now()
            await order.save();
            return order
        } else {
            return false
        }
    }

    // –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    async orderList(userId) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
        const order = await Order.findOne({telegramId: userId, served: "waiting"})
        const user = await User.findOne({telegramId: userId})

        let orderList = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${user.phone_number} –∑–∞–∫–∞–∑–∞–ª:\n`
        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞
        order.meals.map(m => {
            orderList = orderList + m.name + " " + m.price + "\n"
        })


        return orderList
    }


    // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    async orderStatus(userId, status) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
        const order = await Order.findOne({telegramId: userId, served: "Served"})

        // –æ—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        order.served = status
        if (order) {
            order.served = status
            await order.save()
            return order
        }
        return false
        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    }

    async orderStatusGet(userId, status) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
        const order = await Order.findOne({telegramId: userId, served: "apply"})
        if (order) {
            order.served = status
            await order.save()
        } else {
            return false
        }
        // –æ—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞

        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        // mid// telegramId// mealname// mealcount// mealprice// mealsum// served// location// count
        // payment// photo// orderdate
        // name// typeorder// address
        // database// mess// percent// default// percentsum// default// status// provider_payment_charge_id// phone_number


    }

    async orderStatusState(userId, status) {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î
        const order = await Order.findOne({telegramId: userId, served: "apply"})

        // –æ—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        if (order) {
            order.served = status
            await order.save()
        } else {
            console.log(false)
        }

        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    }
}


function prettify(num) {
    var n = num.toString();
    return n.replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g, "$1" + ' ');
}

function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    var R = 6371; // Radius of the earth in km
    var dLat = deg2rad(lat2 - lat1);  // deg2rad below
    var dLon = deg2rad(lon2 - lon1);
    var a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2)
    ;
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c; // Distance in km
    return d;
}

function deg2rad(deg) {
    return deg * (Math.PI / 180)
}

module
    .exports = new OrderController()
